name: Build and Release ISOs

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Nix
        uses: cachix/install-nix-action@v27

      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Update flake.lock
        run: nix flake update --commit-lock-file --accept-flake-config

      - name: Build cosmicIso
        id: build_cosmicIso
        run: |
          nix --experimental-features 'nix-command flakes' build .#nixosConfigurations.cosmicIso.config.system.build.isoImage --accept-flake-config
          if [ $? -ne 0 ]; then
            echo "Build failed"
            exit 1
          fi
          echo "Build completed successfully"

          # Install fd and ripgrep
          sudo apt-get update
          sudo apt-get install -y fd-find ripgrep

          # Print directory contents for debugging
          echo "Contents of result directory:"
          ls -R result

          # Use fd to find .iso files
          echo "Searching for .iso files with fd:"
          fd -e iso . result

          # Use ripgrep to search for files containing "iso" in the name
          echo "Searching for files containing 'iso' in the name with ripgrep:"
          rg -l "iso" result

          # If no .iso files, look for other relevant files
          if [ -z "$(fd -e iso . result)" ]; then
            echo "No .iso files found. Searching for other relevant files:"
            fd -e img -e qcow2 -e raw . result
          fi

          # Check if there's a symlink in the result directory
          if [ -L result ]; then
            echo "result is a symlink. Following to:"
            readlink -f result
            echo "Contents of symlink target:"
            ls -R $(readlink -f result)
          fi

          # Attempt to find the ISO file again
          ISO_PATH=$(fd -e iso . result | head -n 1)
          if [ -z "$ISO_PATH" ]; then
            echo "No ISO file found in the result directory"
            exit 1
          fi
          echo "ISO file found at: $ISO_PATH"
          echo "ISO_PATH=$ISO_PATH" >> $GITHUB_ENV

      - name: Generate tag
        id: generate_tag
        run: echo "NEW_TAG=v$(date +'%Y.%m.%d')-${{ github.run_number }}" >> $GITHUB_ENV

      - name: Create and push tag
        run: |
          git tag ${{ env.NEW_TAG }}
          git push origin ${{ env.NEW_TAG }}

      - name: Upload ISO to SourceForge
        env:
          SOURCEFORGE_USERNAME: ${{ secrets.SOURCEFORGE_USERNAME }}
          SOURCEFORGE_PASSWORD: ${{ secrets.SOURCEFORGE_PASSWORD }}
        run: |
          # Install sshpass
          sudo apt-get update
          sudo apt-get install -y sshpass

          # Create directory, upload ISO, and verify in a single SSH session
          sshpass -p "$SOURCEFORGE_PASSWORD" ssh -o StrictHostKeyChecking=no $SOURCEFORGE_USERNAME,linuxmobileroms@shell.sourceforge.net create << EOF
            set -e
            mkdir -p /home/frs/project/linuxmobileroms/cosmic-nixos
            echo "Directory created or already exists"
            exit
          EOF

          echo "Uploading ISO file from: ${{ env.ISO_PATH }}"
          sshpass -p "$SOURCEFORGE_PASSWORD" scp -o StrictHostKeyChecking=no ${{ env.ISO_PATH }} $SOURCEFORGE_USERNAME,linuxmobileroms@shell.sourceforge.net:/home/frs/project/linuxmobileroms/cosmic-nixos/cosmicIso-${{ env.NEW_TAG }}.iso

          sshpass -p "$SOURCEFORGE_PASSWORD" ssh -o StrictHostKeyChecking=no $SOURCEFORGE_USERNAME,linuxmobileroms@shell.sourceforge.net create << EOF
            set -e
            echo "Verifying upload:"
            ls -l /home/frs/project/linuxmobileroms/cosmic-nixos
            exit
          EOF

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_TAG }}
          release_name: Release ${{ env.NEW_TAG }}
          body: |
            ISO download link: https://sourceforge.net/projects/linuxmobileroms/files/cosmic-nixos/cosmicIso-${{ env.NEW_TAG }}.iso/download
          draft: false
          prerelease: false
